devtools::document()
devtools::document()
devtools::use_vignette("vignette")
library(knitr)
#library(ZillowR)
library(dplyr)
#library(jsonlite)
library(httr)
#library(XML)
library(stringr)
opts_chunk$set(fig.path="images/",
cache.path="cache/",
cache=FALSE,
echo=TRUE,
message=FALSE,
warning=FALSE)
df1r <- readRDS(file = "df1r.rds")
datr <- readRDS(file = "datr.rds")
dats <- readRDS(file = "dats.rds")
dftot <- readRDS(file = "dftot.rds")
datot <- readRDS(file = "datot.rds")
trial <- readRDS(file = "trial.rds")
ws_df <- readRDS(file = "ws_df.rds")
devtools::use_data(datot)
devtools::use_data(datot)
View(datr)
View(datot)
View(dftot)
devtools::use_data(ws_df)
View(datr)
devtools::use_data(datr)
devtools::use_data(dats)
library(ggmap)
library(ggplot2)
ManhattanMap <- qmap(location = "Manhattan", zoom = 12, color = "bw")
ManhattanMap +
geom_point(aes(x = longitude, y = latitude, color = roe, size = roe), alpha = 0.5, data = datot)
citation('ggmap')
View(dats)
View(datot)
head(dotat)
head(datot)
View(datr)
View(dats)
View(ws_df)
devtools::use_readme_rmd()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-"
)
mean(datot$roe)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
mean(datot$roe)
View(datot)
summary(datot)
summary(datot[, 7:8])
plot(datot$roe, type = 1)
plot(x = datot$zipcode, y = datot$roe, type = 1)
plot(x = datot$zipcode, y = datot$roe, type = h)
plot(datot$roe)
plot(x = datot$postal_code, y = datot$roe, type = "l")
plot(x = datot$postal_code, y = datot$roe, type = "p")
plot(x = datot$walk_score, y = datot$roe, type = "p")
plot(x = datot$beds, y = datot$roe, type = "p")
plot(x = datot$walk_score, y = datot$roe, type = "p")
hist(datot$roe)
hist(datot$roe, labels = datot$beds)
ManhattanPlot <- ggplot(datot, aes(x=beds, y=roe))
ManhattanPlot +
geom_boxplot()
ManhattanPlot +
geom_bar(aes(fill = factor(walk_score)))
ManhattanPlot <- ggplot(datot, aes(x=beds, y=roe))
ManhattanPlot +
geom_bar(aes(fill = factor(walk_score)))
ManhattanPlot <- ggplot(datot, aes(roe))
ManhattanPlot +
geom_bar(aes(fill = factor(walk_score)))
ManhattanPlot <- ggplot(datot, aes(x=beds, y=roe))
ManhattanPlot +
geom_boxplot()
ManhattanPlot <- ggplot(datot, aes(x=beds, y=roe)) +geom_boxplot()
ManhattanPlot +
facet_grid(. ~ walk_score)
ManhattanPlot <- ggplot(datot, aes(x=walk_score, y=roe)) + geom_point()
ManhattanPlot +
facet_grid(. ~ beds)
ManhattanPlot <- ggplot(datot, aes(x=walk_score, y=roe)) + geom_density()
ManhattanPlot +
facet_grid(. ~ beds)
ManhattanPlot <- ggplot(datot, aes(x=walk_score, y=roe)) + geom_line()
ManhattanPlot +
facet_grid(. ~ beds)
ManhattanPlot <- ggplot(datot, aes(x=beds, y=roe)) + geom_bar()
ManhattanPlot +
facet_grid(. ~ walk_score)
ManhattanPlot <- ggplot(datot, aes(x=beds, y=roe)) + geom_boxplot()
ManhattanPlot +
facet_grid(. ~ walk_score)
ManhattanPlot <- ggplot(datot, aes(x=beds, y=roe)) + geom_boxplot(notch = TRUE)
ManhattanPlot +
facet_grid(. ~ walk_score)
ManhattanPlot <- ggplot(datot, aes(x=beds, y=roe))
ManhattanPlot +
geom_boxplot()
plot(x = datot$walk_score, y = datot$roe, type = "l")
ManhattanPlot <- ggplot(datot, aes(x=walk_score, y=roe))
ManhattanPlot +
geom_line(aes(linetype = beds))
ManhattanPlot <- ggplot(datot, aes(x=walk_score, y=roe))
ManhattanPlot +
geom_line()
ManhattanPlot +
geom_bar()
ManhattanPlot +
geom_dotplot()
ManhattanPlot +
geom_point()
ManhattanPlot <- ggplot(datot, aes(x=beds, y=roe))
ManhattanPlot +
geom_boxplot()
View(datot)
#library(HousingROE)
ManhattanPlot1 <- ggplot(datot, aes(x=beds, y=roe))
ManhattanPlot1 +
geom_boxplot()
ManhattanPlot2 <- ggplot(datot, aes(x=postal_code, y=walk_score))
ManhattanPlot1 +
geom_point()
#library(HousingROE)
ManhattanPlot1 <- ggplot(datot, aes(x=beds, y=roe))
ManhattanPlot1 +
geom_boxplot()
ManhattanPlot2 <- ggplot(datot, aes(x=postal_code, y=walk_score))
ManhattanPlot2 +
geom_point()
#library(HousingROE)
ManhattanPlot <- ggplot(datot, aes(x=beds, y=roe, color=walk_score))
ManhattanPlot +
geom_boxplot()
ManhattanPlot <- ggplot(datot, aes(x=beds, y=roe))
ManhattanPlot +
geom_boxplot(aes(color=walk_score))
ManhattanPlot +
geom_boxplot(aes(fill=walk_score))
ManhattanPlot +
geom_boxplot(aes(fill=factor(walk_score)))
View(datot)
ManhattanPlot <- ggplot(datot, aes(x=walk_score, y=roe))
ManhattanPlot +
geom_boxplot(aes(fill=factor(beds)))
ManhattanPlot +
geom_boxplot(aes(fill=factor(beds)), alpha=0.3)
#library(HousingROE)
ManhattanPlot <- ggplot(datot, aes(x=beds, y=roe))
ManhattanPlot +
geom_boxplot(aes(fill=factor(walk_score)), alpha=0.3)
ManhattanPlot <- ggplot(datot[datot$beds == "studio"|datot$beds == "1 bed"|datot$beds == "2 beds"], aes(x=beds, y=roe))
ManhattanPlot <- ggplot(datot[datot$beds == "studio"|datot$beds == "1 bed"|datot$beds == "2 beds", ], aes(x=beds, y=roe))
ManhattanPlot +
geom_boxplot(aes(fill=factor(walk_score)), alpha=0.3)
ManhattanPlot <- ggplot(datot, aes(x=beds, y=roe))
ManhattanPlot +
geom_boxplot(aes(alpha=walk_score))
plot(datot$walk_score)
hist(datot$walk_score)
ManhattanPlot <- ggplot(datot[datot$walk_score>=95, ], aes(x=beds, y=roe))
ManhattanPlot +
geom_boxplot(aes(fill=walk_score))
ManhattanPlot +
geom_boxplot(aes(fill=factor(walk_score)))
ManhattanPlot <- ggplot(datot[datot$walk_score>=97, ], aes(x=beds, y=roe))
ManhattanPlot +
geom_boxplot(aes(fill=factor(walk_score)))
ManhattanPlot <- ggplot(datot[datot$walk_score>=95, ], aes(x=beds, y=roe)) + boxplot()
ManhattanPlot <- ggplot(datot[datot$walk_score>=95, ], aes(x=beds, y=roe)) + geom_boxplot()
ManhattanPlot +
facet_grid(. ~ walk_score)
#library(HousingROE)
ManhattanPlot <- ggplot(datot[datot$walk_score>=96, ], aes(x=beds, y=roe)) + geom_boxplot()
ManhattanPlot +
facet_grid(. ~ walk_score)
#library(HousingROE)
ManhattanPlot <- ggplot(datot, aes(x=beds, y=roe))
ManhattanPlot +
geom_boxplot()
#library(HousingROE)
ManhattanPlot <- ggplot(datot[datot$beds != "1.5 beds" & datot$beds != "10 beds", ], aes(x=beds, y=roe))
ManhattanPlot +
geom_boxplot()
plot(x=datot$postal_code, y=datot$walk_score)
ManhattanPlot <- ggplot(datot[datot$beds != "1.5 beds" & datot$beds != "10 beds", ], aes(x=beds, y=roe*walk_score/100))
ManhattanPlot +
geom_boxplot()
#library(HousingROE)
ManhattanPlot <- ggplot(datot[datot$beds != "1.5 beds" & datot$beds != "10 beds", ], aes(x=beds, y=walk_score))
ManhattanPlot +
geom_boxplot()
#library(HousingROE)
ManhattanPlot <- ggplot(datot[datot$beds != "1.5 beds" & datot$beds != "10 beds", ], aes(x=beds, y=roe))
ManhattanPlot +
geom_boxplot()
#library(HousingROE)
ManhattanPlot <- ggplot(datot[datot$beds != "1.5 beds" & datot$beds != "10 beds", ], aes(x=beds, y=roe))
ManhattanPlot +
geom_boxplot(aes(color=walk_score), alpha=0.5)
#library(HousingROE)
ManhattanPlot <- ggplot(datot[datot$beds != "1.5 beds" & datot$beds != "10 beds", ], aes(x=beds, y=roe))
ManhattanPlot +
geom_boxplot(aes(fill=walk_score), alpha=0.5)
#library(HousingROE)
ManhattanPlot <- ggplot(datot[datot$beds != "1.5 beds" & datot$beds != "10 beds", ], aes(x=beds, y=roe))
ManhattanPlot +
geom_boxplot(aes(fill=factor(walk_score)), alpha=0.5)
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
?iris
devtools::check()
devtools::check()
devtools::use_mit_license()
usethis::use_mit_license()
usethis::use_mit_license(name = "LICENSE")
usethis::use_mit_license(name = "Wenting Feng")
devtools::check()
devtools::check()
library(ggmap)
ManhattanMap <- qmap(location = "Manhattan", zoom = 12, color = "bw")
library(ggmap)
ManhattanMap <- qmap(location = "Manhattan", zoom = 12, color = "bw")
ManhattanMap +
geom_point(aes(x = longitude, y = latitude, color = roe, size = roe), alpha = 0.5, data = datot)
devtools::check()
devtools::check()
devtools::check()
preProc$rotation
library(caret)
install.packages("caret")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p=3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh=0.8,
outcome=training$diagnosis)
preProc$rotation
install.packages("AppliedPredictiveModeling")
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p=3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ss <- training[,grep('^IL', x = names(training) )]
preProc <- preProcess(ss, method='pca', thresh=0.8,
outcome=training$diagnosis)
preProc$rotation
preProc <- preProcess(ss, method='pca', thresh=0.9,
outcome=training$diagnosis)
preProc$rotation
